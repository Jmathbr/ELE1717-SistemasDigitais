
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000001e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a5f  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000681  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000363  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ae  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000015a  0000015a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 00000020  00000110  00000110  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 00000036  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_adress 00000030  000000b6  000000b6  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_init 0000000e  00000130  00000130  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_off_cursor 0000000e  0000013e  0000013e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_on_cursor 0000000e  0000014c  0000014c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000002a  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

00000110 <lcd_cmd>:
void delay_1(){
	for(int i = 0;i<200;i++){}
}
void lcd_cmd(unsigned char cmd){
	
	PORTB &= 0xF0;							// Mask preservation 4 LSBs
 110:	95 b1       	in	r25, 0x05	; 5
 112:	90 7f       	andi	r25, 0xF0	; 240
 114:	95 b9       	out	0x05, r25	; 5
	PORTB |= cmd;							// Add data command
 116:	95 b1       	in	r25, 0x05	; 5
 118:	89 2b       	or	r24, r25
 11a:	85 b9       	out	0x05, r24	; 5
	
	PORTB &= ~(1<<PORTB5);					// Set RS = 0
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB4);					// Set E = 1
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 61       	ori	r24, 0x10	; 16
 126:	85 b9       	out	0x05, r24	; 5
	delay_1();				
	PORTB &= ~(1<<PORTB4);					// Set E = 0 
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8f 7e       	andi	r24, 0xEF	; 239
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret

Disassembly of section .text.lcd_data:

00000080 <lcd_data>:
#define F_CPU 8000000UL
#include <avr/io.h>

void delay_1(){
	for(int i = 0;i<200;i++){}
}
  80:	95 b1       	in	r25, 0x05	; 5
  82:	90 62       	ori	r25, 0x20	; 32
  84:	95 b9       	out	0x05, r25	; 5
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	0e c0       	rjmp	.+28     	; 0xa8 <lcd_data+0x28>
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	90 7f       	andi	r25, 0xF0	; 240
  90:	95 b9       	out	0x05, r25	; 5
  92:	95 b1       	in	r25, 0x05	; 5
  94:	98 2b       	or	r25, r24
  96:	95 b9       	out	0x05, r25	; 5
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	90 61       	ori	r25, 0x10	; 16
  9c:	95 b9       	out	0x05, r25	; 5
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	9f 7e       	andi	r25, 0xEF	; 239
  a2:	95 b9       	out	0x05, r25	; 5
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	7c f3       	brlt	.-34     	; 0x8c <lcd_data+0xc>
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

Disassembly of section .text.lcd_adress:

000000b6 <lcd_adress>:
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	9f 7d       	andi	r25, 0xDF	; 223
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	0e c0       	rjmp	.+28     	; 0xde <lcd_adress+0x28>
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	98 2b       	or	r25, r24
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	90 61       	ori	r25, 0x10	; 16
  d2:	95 b9       	out	0x05, r25	; 5
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	9f 7e       	andi	r25, 0xEF	; 239
  d8:	95 b9       	out	0x05, r25	; 5
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	22 30       	cpi	r18, 0x02	; 2
  e0:	31 05       	cpc	r19, r1
  e2:	7c f3       	brlt	.-34     	; 0xc2 <lcd_adress+0xc>
  e4:	08 95       	ret

Disassembly of section .text.lcd_init:

00000130 <lcd_init>:
	}

}
void lcd_init(){
	
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
	lcd_cmd(0x08);							//RS = 0 D7:D4 = 1000
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
 13c:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

0000013e <lcd_off_cursor>:
	
}

void lcd_off_cursor(){

	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
	lcd_cmd(0x0C);							//RS = 0 D7:D4 = 1100
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
 14a:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

0000014c <lcd_on_cursor>:
}

void lcd_on_cursor(){
	
	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
	lcd_cmd(0x0F);							//RS = 0 D7:D4 = 1100
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	0e 94 88 00 	call	0x110	; 0x110 <lcd_cmd>
 158:	08 95       	ret

Disassembly of section .text.main:

000000e6 <main>:
#define F_CPU 8000000UL
#include <avr/io.h>

void delay_1(){
	for(int i = 0;i<200;i++){}
}
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 b9       	out	0x04, r24	; 4
  ea:	87 b9       	out	0x07, r24	; 7
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	8f ea       	ldi	r24, 0xAF	; 175
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	0e 94 98 00 	call	0x130	; 0x130 <lcd_init>
  f6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_off_cursor>
  fa:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_on_cursor>
  fe:	8f e8       	ldi	r24, 0x8F	; 143
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_adress>
 104:	85 e3       	ldi	r24, 0x35	; 53
 106:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
