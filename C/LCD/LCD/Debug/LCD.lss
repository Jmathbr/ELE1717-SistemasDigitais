
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a70  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000681  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000307  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000191d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000013a  0000013a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 00000020  000000aa  000000aa  000000fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 00000020  000000ca  000000ca  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_adress 00000020  000000ea  000000ea  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_init 00000014  0000010a  0000010a  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_off_cursor 0000000e  0000011e  0000011e  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_on_cursor 0000000e  0000012c  0000012c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000002a  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
   8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
   c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  2c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000013a <__bad_interrupt>:
 13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.lcd_cmd:

000000aa <lcd_cmd>:
void delay_1(){
	for(int i = 0;i<200;i++){}
}
void lcd_cmd(unsigned char cmd){
	
	PORTB &= 0xF0;							// Mask preservation 4 LSBs
  aa:	95 b1       	in	r25, 0x05	; 5
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	95 b9       	out	0x05, r25	; 5
	PORTB |= cmd;							// Add data command
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	89 2b       	or	r24, r25
  b4:	85 b9       	out	0x05, r24	; 5
	
	PORTB &= ~(1<<PORTB5);					// Set RS = 0
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB4);					// Set E = 1
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	85 b9       	out	0x05, r24	; 5
	delay_1();				
	PORTB &= ~(1<<PORTB4);					// Set E = 0 
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	08 95       	ret

Disassembly of section .text.lcd_data:

000000ca <lcd_data>:

}

void lcd_data(unsigned char data){
	
	PORTB |= (1<<PORTB5);					// Set RS = 1
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	90 62       	ori	r25, 0x20	; 32
  ce:	95 b9       	out	0x05, r25	; 5
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
		}
		
		else{
			PORTB &= 0xF0;						// Mask preservation 4 LSBs
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	95 b9       	out	0x05, r25	; 5
			PORTB |= data;						// Add data
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	98 2b       	or	r25, r24
  da:	95 b9       	out	0x05, r25	; 5
			
			PORTB |= (1<<PORTB4);				// Set E = 1
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	90 61       	ori	r25, 0x10	; 16
  e0:	95 b9       	out	0x05, r25	; 5
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	9f 7e       	andi	r25, 0xEF	; 239
  e6:	95 b9       	out	0x05, r25	; 5
  e8:	f3 cf       	rjmp	.-26     	; 0xd0 <lcd_data+0x6>

Disassembly of section .text.lcd_adress:

000000ea <lcd_adress>:
	PORTB &= ~(1<<PORTB5);					// Set RS = 0 

}
void lcd_adress(unsigned char adress){
	
	PORTB &= ~(1<<PORTB5);					// Set RS = 0
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	9f 7d       	andi	r25, 0xDF	; 223
  ee:	95 b9       	out	0x05, r25	; 5
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
		}
		
		else{
			PORTB &= 0xF0;						// Mask preservation 4 LSBs
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	95 b9       	out	0x05, r25	; 5
			PORTB |= adress;						// Add data
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	98 2b       	or	r25, r24
  fa:	95 b9       	out	0x05, r25	; 5
			
			PORTB |= (1<<PORTB4);				// Set E = 1
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	90 61       	ori	r25, 0x10	; 16
 100:	95 b9       	out	0x05, r25	; 5
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
 102:	95 b1       	in	r25, 0x05	; 5
 104:	9f 7e       	andi	r25, 0xEF	; 239
 106:	95 b9       	out	0x05, r25	; 5
 108:	f3 cf       	rjmp	.-26     	; 0xf0 <lcd_adress+0x6>

Disassembly of section .text.lcd_init:

0000010a <lcd_init>:
	}
	PORTB &= ~(1<<PORTB5);					// Set RS = 0 
}
void lcd_init(){
	
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x08);							//RS = 0 D7:D4 = 1000
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
 11c:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

0000011e <lcd_off_cursor>:
	
}

void lcd_off_cursor(){

	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x0C);							//RS = 0 D7:D4 = 1100
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
 12a:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

0000012c <lcd_on_cursor>:
}

void lcd_on_cursor(){
	
	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
	lcd_cmd(0x0F);							//RS = 0 D7:D4 = 1100
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_cmd>
 138:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
#define F_CPU 8000000UL
#include <avr/io.h>

void delay_1(){
	for(int i = 0;i<200;i++){}
}
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
  84:	87 b9       	out	0x07, r24	; 7
  86:	85 b9       	out	0x05, r24	; 5
  88:	8f ea       	ldi	r24, 0xAF	; 175
  8a:	88 b9       	out	0x08, r24	; 8
  8c:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_init>
  90:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_off_cursor>
  94:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_on_cursor>
  98:	8f e8       	ldi	r24, 0x8F	; 143
  9a:	0e 94 75 00 	call	0xea	; 0xea <lcd_adress>
  9e:	85 e3       	ldi	r24, 0x35	; 53
  a0:	0e 94 65 00 	call	0xca	; 0xca <lcd_data>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret
