
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009d5  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000675  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c7  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008a  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 0000002e  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_init 0000000e  000000ca  000000ca  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_off_cursor 0000000e  000000d8  000000d8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_on_cursor 0000000e  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000001c  000000ae  000000ae  00000102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

00000080 <lcd_cmd>:
	PORTB |= data;
	
	PORTC &= 0xFC;
	PORTC |= 0x01;
	for(int i = 0;i<255;i++){}//Delay
	PORTC &=~ 0x01;
  80:	95 b1       	in	r25, 0x05	; 5
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	95 b9       	out	0x05, r25	; 5
  86:	95 b1       	in	r25, 0x05	; 5
  88:	89 2b       	or	r24, r25
  8a:	85 b9       	out	0x05, r24	; 5
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	8c 7f       	andi	r24, 0xFC	; 252
  90:	88 b9       	out	0x08, r24	; 8
  92:	88 b1       	in	r24, 0x08	; 8
  94:	81 60       	ori	r24, 0x01	; 1
  96:	88 b9       	out	0x08, r24	; 8
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <lcd_cmd+0x20>
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	8f 3f       	cpi	r24, 0xFF	; 255
  a2:	91 05       	cpc	r25, r1
  a4:	e4 f3       	brlt	.-8      	; 0x9e <lcd_cmd+0x1e>
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	08 95       	ret

Disassembly of section .text.lcd_init:

000000ca <lcd_init>:
}

void lcd_init(){
	//RS = 0 D7:D4 = 0010
	//RS = 0 D7:D4 = 1000
	lcd_cmd(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	lcd_cmd(0x08);
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
  d6:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

000000d8 <lcd_off_cursor>:
}

void lcd_off_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	lcd_cmd(0x0C);
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
  e4:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

000000e6 <lcd_on_cursor>:
}

void lcd_on_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	lcd_cmd(0x0F);
  ec:	8f e0       	ldi	r24, 0x0F	; 15
  ee:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
  f2:	08 95       	ret

Disassembly of section .text.main:

000000ae <main>:
	PORTB |= data;
	
	PORTC &= 0xFC;
	PORTC |= 0x01;
	for(int i = 0;i<255;i++){}//Delay
	PORTC &=~ 0x01;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	88 ef       	ldi	r24, 0xF8	; 248
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	8f ea       	ldi	r24, 0xAF	; 175
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	0e 94 65 00 	call	0xca	; 0xca <lcd_init>
  c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_off_cursor>
  c4:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_on_cursor>
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0x16>
