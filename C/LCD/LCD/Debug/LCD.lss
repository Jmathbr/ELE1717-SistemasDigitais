
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000aa2  00000000  00000000  00000231  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000681  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000381  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cf  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000152  00000152  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 00000020  00000102  00000102  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 0000005c  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_init 00000014  00000122  00000122  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_off_cursor 0000000e  00000136  00000136  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_on_cursor 0000000e  00000144  00000144  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000026  000000dc  000000dc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

00000102 <lcd_cmd>:
			PORTB |= (1<<PORTB4);				// Set E = 1
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
		}
	}
	PORTB &= ~(1<<PORTB5);					// Set RS = 0 
 102:	95 b1       	in	r25, 0x05	; 5
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	95 b9       	out	0x05, r25	; 5
 108:	95 b1       	in	r25, 0x05	; 5
 10a:	89 2b       	or	r24, r25
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	85 b9       	out	0x05, r24	; 5
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 61       	ori	r24, 0x10	; 16
 118:	85 b9       	out	0x05, r24	; 5
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

Disassembly of section .text.lcd_data:

00000080 <lcd_data>:
  80:	95 b1       	in	r25, 0x05	; 5
  82:	90 62       	ori	r25, 0x20	; 32
  84:	95 b9       	out	0x05, r25	; 5
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	21 c0       	rjmp	.+66     	; 0xce <lcd_data+0x4e>
  8c:	21 15       	cp	r18, r1
  8e:	31 05       	cpc	r19, r1
  90:	81 f4       	brne	.+32     	; 0xb2 <lcd_data+0x32>
  92:	95 b1       	in	r25, 0x05	; 5
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	95 b9       	out	0x05, r25	; 5
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	48 2f       	mov	r20, r24
  9c:	42 95       	swap	r20
  9e:	4f 70       	andi	r20, 0x0F	; 15
  a0:	94 2b       	or	r25, r20
  a2:	95 b9       	out	0x05, r25	; 5
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	90 61       	ori	r25, 0x10	; 16
  a8:	95 b9       	out	0x05, r25	; 5
  aa:	95 b1       	in	r25, 0x05	; 5
  ac:	9f 7e       	andi	r25, 0xEF	; 239
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	0c c0       	rjmp	.+24     	; 0xca <lcd_data+0x4a>
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	95 b9       	out	0x05, r25	; 5
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	98 2b       	or	r25, r24
  bc:	95 b9       	out	0x05, r25	; 5
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	90 61       	ori	r25, 0x10	; 16
  c2:	95 b9       	out	0x05, r25	; 5
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	9f 7e       	andi	r25, 0xEF	; 239
  c8:	95 b9       	out	0x05, r25	; 5
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	22 30       	cpi	r18, 0x02	; 2
  d0:	31 05       	cpc	r19, r1
  d2:	e4 f2       	brlt	.-72     	; 0x8c <lcd_data+0xc>
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	85 b9       	out	0x05, r24	; 5
  da:	08 95       	ret

Disassembly of section .text.lcd_init:

00000122 <lcd_init>:
}
void lcd_init(){
	
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x08);							//RS = 0 D7:D4 = 1000
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
 134:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

00000136 <lcd_off_cursor>:
	
}

void lcd_off_cursor(){

	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x0C);							//RS = 0 D7:D4 = 1100
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
 142:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

00000144 <lcd_on_cursor>:
}

void lcd_on_cursor(){
	
	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
	lcd_cmd(0x0F);							//RS = 0 D7:D4 = 1100
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	0e 94 81 00 	call	0x102	; 0x102 <lcd_cmd>
 150:	08 95       	ret

Disassembly of section .text.main:

000000dc <main>:
			PORTB |= (1<<PORTB4);				// Set E = 1
			delay_1();
			PORTB &= ~(1<<PORTB4);				// Set E = 0
		}
	}
	PORTB &= ~(1<<PORTB5);					// Set RS = 0 
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
  e0:	87 b9       	out	0x07, r24	; 7
  e2:	80 ef       	ldi	r24, 0xF0	; 240
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	8f ea       	ldi	r24, 0xAF	; 175
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
  ee:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_off_cursor>
  f2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_on_cursor>
  f6:	85 e3       	ldi	r24, 0x35	; 53
  f8:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret
