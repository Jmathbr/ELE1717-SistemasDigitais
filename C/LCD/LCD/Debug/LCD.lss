
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bf9  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000681  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f2  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cf  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000020e  0000020e  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 00000020  000001be  000001be  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 0000005c  000000e2  000000e2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_adress 0000005c  0000013e  0000013e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_init 00000014  000001de  000001de  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_off_cursor 0000000e  000001f2  000001f2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_on_cursor 0000000e  00000200  00000200  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_default 00000062  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000024  0000019a  0000019a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
   8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
   c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
  64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000020e <__bad_interrupt>:
 20e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

000001be <lcd_cmd>:
void delay_1(){
	for(int i = 0;i<200;i++){}
}
void lcd_cmd(unsigned char cmd){
	
	PORTB &= 0xF0;								// Mask preservation 4 LSBs
 1be:	95 b1       	in	r25, 0x05	; 5
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	95 b9       	out	0x05, r25	; 5
	PORTB |= cmd;								// Add data command
 1c4:	95 b1       	in	r25, 0x05	; 5
 1c6:	89 2b       	or	r24, r25
 1c8:	85 b9       	out	0x05, r24	; 5
	
	PORTB &= ~(1<<PORTB5);						// Set RS = 0
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB4);						// Set E = 1
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	80 61       	ori	r24, 0x10	; 16
 1d4:	85 b9       	out	0x05, r24	; 5
	delay_1();				
	PORTB &= ~(1<<PORTB4);						// Set E = 0 
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	08 95       	ret

Disassembly of section .text.lcd_data:

000000e2 <lcd_data>:
#define F_CPU 8000000UL
#include <avr/io.h>

void delay_1(){
	for(int i = 0;i<200;i++){}
}
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	90 62       	ori	r25, 0x20	; 32
  e6:	95 b9       	out	0x05, r25	; 5
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	21 c0       	rjmp	.+66     	; 0x130 <lcd_data+0x4e>
  ee:	21 15       	cp	r18, r1
  f0:	31 05       	cpc	r19, r1
  f2:	81 f4       	brne	.+32     	; 0x114 <lcd_data+0x32>
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	90 7f       	andi	r25, 0xF0	; 240
  f8:	95 b9       	out	0x05, r25	; 5
  fa:	95 b1       	in	r25, 0x05	; 5
  fc:	48 2f       	mov	r20, r24
  fe:	42 95       	swap	r20
 100:	4f 70       	andi	r20, 0x0F	; 15
 102:	94 2b       	or	r25, r20
 104:	95 b9       	out	0x05, r25	; 5
 106:	95 b1       	in	r25, 0x05	; 5
 108:	90 61       	ori	r25, 0x10	; 16
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	9f 7e       	andi	r25, 0xEF	; 239
 110:	95 b9       	out	0x05, r25	; 5
 112:	0c c0       	rjmp	.+24     	; 0x12c <lcd_data+0x4a>
 114:	95 b1       	in	r25, 0x05	; 5
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	95 b9       	out	0x05, r25	; 5
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	98 2b       	or	r25, r24
 11e:	95 b9       	out	0x05, r25	; 5
 120:	95 b1       	in	r25, 0x05	; 5
 122:	90 61       	ori	r25, 0x10	; 16
 124:	95 b9       	out	0x05, r25	; 5
 126:	95 b1       	in	r25, 0x05	; 5
 128:	9f 7e       	andi	r25, 0xEF	; 239
 12a:	95 b9       	out	0x05, r25	; 5
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	22 30       	cpi	r18, 0x02	; 2
 132:	31 05       	cpc	r19, r1
 134:	e4 f2       	brlt	.-72     	; 0xee <lcd_data+0xc>
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8f 7d       	andi	r24, 0xDF	; 223
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	08 95       	ret

Disassembly of section .text.lcd_adress:

0000013e <lcd_adress>:
 13e:	95 b1       	in	r25, 0x05	; 5
 140:	9f 7d       	andi	r25, 0xDF	; 223
 142:	95 b9       	out	0x05, r25	; 5
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	21 c0       	rjmp	.+66     	; 0x18c <lcd_adress+0x4e>
 14a:	21 15       	cp	r18, r1
 14c:	31 05       	cpc	r19, r1
 14e:	81 f4       	brne	.+32     	; 0x170 <lcd_adress+0x32>
 150:	95 b1       	in	r25, 0x05	; 5
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	95 b9       	out	0x05, r25	; 5
 156:	95 b1       	in	r25, 0x05	; 5
 158:	48 2f       	mov	r20, r24
 15a:	42 95       	swap	r20
 15c:	4f 70       	andi	r20, 0x0F	; 15
 15e:	94 2b       	or	r25, r20
 160:	95 b9       	out	0x05, r25	; 5
 162:	95 b1       	in	r25, 0x05	; 5
 164:	90 61       	ori	r25, 0x10	; 16
 166:	95 b9       	out	0x05, r25	; 5
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	9f 7e       	andi	r25, 0xEF	; 239
 16c:	95 b9       	out	0x05, r25	; 5
 16e:	0c c0       	rjmp	.+24     	; 0x188 <lcd_adress+0x4a>
 170:	95 b1       	in	r25, 0x05	; 5
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	95 b9       	out	0x05, r25	; 5
 176:	95 b1       	in	r25, 0x05	; 5
 178:	98 2b       	or	r25, r24
 17a:	95 b9       	out	0x05, r25	; 5
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	90 61       	ori	r25, 0x10	; 16
 180:	95 b9       	out	0x05, r25	; 5
 182:	95 b1       	in	r25, 0x05	; 5
 184:	9f 7e       	andi	r25, 0xEF	; 239
 186:	95 b9       	out	0x05, r25	; 5
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	22 30       	cpi	r18, 0x02	; 2
 18e:	31 05       	cpc	r19, r1
 190:	e4 f2       	brlt	.-72     	; 0x14a <lcd_adress+0xc>
 192:	85 b1       	in	r24, 0x05	; 5
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret

Disassembly of section .text.lcd_init:

000001de <lcd_init>:
	}
	PORTB &= ~(1<<PORTB5);					// Set RS = 0 
}
void lcd_init(){
	
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
	lcd_cmd(0x02);							//RS = 0 D7:D4 = 0010
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
	lcd_cmd(0x08);							//RS = 0 D7:D4 = 1000
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
 1f0:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

000001f2 <lcd_off_cursor>:
	
}

void lcd_off_cursor(){

	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
	lcd_cmd(0x0C);							//RS = 0 D7:D4 = 1100
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
 1fe:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

00000200 <lcd_on_cursor>:
}

void lcd_on_cursor(){
	
	lcd_cmd(0x00);							//RS = 0 D7:D4 = 0000
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
	lcd_cmd(0x0F);							//RS = 0 D7:D4 = 1100
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_cmd>
 20c:	08 95       	ret

Disassembly of section .text.lcd_default:

00000080 <lcd_default>:
#define F_CPU 8000000UL
#include <avr/io.h>

void delay_1(){
	for(int i = 0;i<200;i++){}
}
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  86:	8d e4       	ldi	r24, 0x4D	; 77
  88:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  8c:	81 e8       	ldi	r24, 0x81	; 129
  8e:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  92:	8f e6       	ldi	r24, 0x6F	; 111
  94:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  98:	82 e8       	ldi	r24, 0x82	; 130
  9a:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  9e:	84 e6       	ldi	r24, 0x64	; 100
  a0:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  a4:	83 e8       	ldi	r24, 0x83	; 131
  a6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  aa:	8a e3       	ldi	r24, 0x3A	; 58
  ac:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  b0:	80 ec       	ldi	r24, 0xC0	; 192
  b2:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  b6:	8d e4       	ldi	r24, 0x4D	; 77
  b8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  bc:	81 ec       	ldi	r24, 0xC1	; 193
  be:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  c2:	83 e7       	ldi	r24, 0x73	; 115
  c4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  c8:	82 ec       	ldi	r24, 0xC2	; 194
  ca:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  d4:	83 ec       	ldi	r24, 0xC3	; 195
  d6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_adress>
  da:	8a e3       	ldi	r24, 0x3A	; 58
  dc:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_data>
  e0:	08 95       	ret

Disassembly of section .text.main:

0000019a <main>:
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 b9       	out	0x04, r24	; 4
 19e:	87 b9       	out	0x07, r24	; 7
 1a0:	80 ef       	ldi	r24, 0xF0	; 240
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	8f ea       	ldi	r24, 0xAF	; 175
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_init>
 1ac:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_off_cursor>
 1b0:	0e 94 00 01 	call	0x200	; 0x200 <lcd_on_cursor>
 1b4:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret
