
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a21  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000672  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000308  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ae  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000156  00000156  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_cmd 0000002e  000000fe  000000fe  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_data 0000004c  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_init 0000000e  0000012c  0000012c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_off_cursor 0000000e  0000013a  0000013a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_on_cursor 0000000e  00000148  00000148  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000032  000000cc  000000cc  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_cmd:

000000fe <lcd_cmd>:
#define AUXPORTB PORTB

#include <xc.h>
void lcd_cmd(unsigned char cmd){
	
	PORTB &= 0xF0;
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	95 b9       	out	0x05, r25	; 5
	PORTB |= cmd;
 104:	95 b1       	in	r25, 0x05	; 5
 106:	89 2b       	or	r24, r25
 108:	85 b9       	out	0x05, r24	; 5
	
	PORTC &= 0xFC;
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	8c 7f       	andi	r24, 0xFC	; 252
 10e:	88 b9       	out	0x08, r24	; 8
	PORTC |= 0x01;
 110:	88 b1       	in	r24, 0x08	; 8
 112:	81 60       	ori	r24, 0x01	; 1
 114:	88 b9       	out	0x08, r24	; 8
	for(int i = 0;i<255;i++){}//Delay
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_cmd+0x20>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 3f       	cpi	r24, 0xFF	; 255
 120:	91 05       	cpc	r25, r1
 122:	e4 f3       	brlt	.-8      	; 0x11c <lcd_cmd+0x1e>
	PORTC &=~ 0x01;
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	88 b9       	out	0x08, r24	; 8
 12a:	08 95       	ret

Disassembly of section .text.lcd_data:

00000080 <lcd_data>:

}

void lcd_data(unsigned char data){
	PORTC &= 0xFC;
  80:	98 b1       	in	r25, 0x08	; 8
  82:	9c 7f       	andi	r25, 0xFC	; 252
  84:	98 b9       	out	0x08, r25	; 8
	PORTC |= 0x02;
  86:	98 b1       	in	r25, 0x08	; 8
  88:	92 60       	ori	r25, 0x02	; 2
  8a:	98 b9       	out	0x08, r25	; 8
	for(int i=0; i<2 ;i++){
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	16 c0       	rjmp	.+44     	; 0xbe <lcd_data+0x3e>
		PORTB &= 0xF0;
  92:	95 b1       	in	r25, 0x05	; 5
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	95 b9       	out	0x05, r25	; 5
		PORTB |= data;
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	98 2b       	or	r25, r24
  9c:	95 b9       	out	0x05, r25	; 5
		
		//PORTC &= 0xFC;
		PORTC |= 0x03;
  9e:	98 b1       	in	r25, 0x08	; 8
  a0:	93 60       	ori	r25, 0x03	; 3
  a2:	98 b9       	out	0x08, r25	; 8
		for(int j = 0;j<255;j++){}//Delay
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <lcd_data+0x2e>
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	2f 3f       	cpi	r18, 0xFF	; 255
  b0:	31 05       	cpc	r19, r1
  b2:	dc f3       	brlt	.-10     	; 0xaa <lcd_data+0x2a>
		PORTC &=~ 0x01;	
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	9e 7f       	andi	r25, 0xFE	; 254
  b8:	98 b9       	out	0x08, r25	; 8
}

void lcd_data(unsigned char data){
	PORTC &= 0xFC;
	PORTC |= 0x02;
	for(int i=0; i<2 ;i++){
  ba:	4f 5f       	subi	r20, 0xFF	; 255
  bc:	5f 4f       	sbci	r21, 0xFF	; 255
  be:	42 30       	cpi	r20, 0x02	; 2
  c0:	51 05       	cpc	r21, r1
  c2:	3c f3       	brlt	.-50     	; 0x92 <lcd_data+0x12>
		//PORTC &= 0xFC;
		PORTC |= 0x03;
		for(int j = 0;j<255;j++){}//Delay
		PORTC &=~ 0x01;	
	}
	PORTC &=~ 0x02;	
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	08 95       	ret

Disassembly of section .text.lcd_init:

0000012c <lcd_init>:
	lcd_cmd(data[4]);
}*/
void lcd_init(){
	//RS = 0 D7:D4 = 0010
	//RS = 0 D7:D4 = 1000
	lcd_cmd(0x02);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
	lcd_cmd(0x08);
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
 138:	08 95       	ret

Disassembly of section .text.lcd_off_cursor:

0000013a <lcd_off_cursor>:
}

void lcd_off_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
	lcd_cmd(0x0C);
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
 146:	08 95       	ret

Disassembly of section .text.lcd_on_cursor:

00000148 <lcd_on_cursor>:
}

void lcd_on_cursor(){
	//RS = 0 D7:D4 = 0000
	//RS = 0 D7:D4 = 1100
	lcd_cmd(0x00);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
	lcd_cmd(0x0F);
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
 154:	08 95       	ret

Disassembly of section .text.main:

000000cc <main>:



int main(void)
{
	DDRB = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
  d0:	87 b9       	out	0x07, r24	; 7
	PORTB = 0xF8;
  d2:	88 ef       	ldi	r24, 0xF8	; 248
  d4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xAF;
  d6:	8f ea       	ldi	r24, 0xAF	; 175
  d8:	88 b9       	out	0x08, r24	; 8
	lcd_init();
  da:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_init>
	lcd_off_cursor();
  de:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_off_cursor>
	lcd_cmd(0x02);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
	lcd_cmd(0x02);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_cmd>
	lcd_on_cursor();
  ee:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_on_cursor>
	lcd_data(0xAF);
  f2:	8f ea       	ldi	r24, 0xAF	; 175
  f4:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
    
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
